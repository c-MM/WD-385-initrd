#!/bin/busybox ash
# Initrd for WD Mycloud Mirror gen2 & Ex2 ultra
# Boots from partition labeled "rootfs"
# (c) Carl Schiller; schreibcarl@gmail.com

# Creat folders and install Busybox
/bin/busybox mkdir -p /dev /mnt/root /mnt/key /mnt/config /mnt/config/initrd /proc /root /usr/sbin /usr/bin /sbin /bin /sys /run
/bin/busybox --install -s

export PATH=/bin:/sbin:/usr/bin:/usr/sbin

# Mount the /proc and /sys filesystems.
mount -t proc none /proc
mount -t sysfs none /sys
mount -t devtmpfs none /dev

# Adding mdev support
echo /sbin/mdev >/proc/sys/kernel/hotplug
mdev -s

#copy customconfig from nand
copyconfig() {
  cp /mnt/config/initrd/shadow /etc/		#rootpasswd
  #cp /mnt/config/initrd/ /etc/dropbear		#ssh_fingerprint
  #cp /mnt/conifg/initrd				#
}

# Start decryption shell
decrypt_shell() {
  # Check which device encrypted
  $cryptdev=$(blkid -l -o device -t TYPE=crypto_LUKS)
  echo device=$(blkid -l -o device -t TYPE=crypto_LUKS) >>/etc/profile
  echo export device >>/etc/profile
  # Look for key on usb / hdd
  if [ -h /ddev/disk/by-label/key ]; then
    mount -o rw $(findfs LABEL=key) /mnt/key
    wait
    cryptsetup luksOpen --header /mnt/key/key.luks /root/key KEY
    # Look for key on nand
  elif [ -h /mnt/config/initrd/key.luks ]; then
    cryptsetup luksOpen --header /mnt/config/initrd/key.luks /root/key KEY
    wait
    cryptsetup --key-file /dev/mapper/lukskey luksOpen $cryptdev cryptroot #Fix device
  else
    startnetwork
    dropbear -B -p 2222 -b /etc/dropbear/banner.crypto -P /run/dropbear.pid 2>&1 >/dev/null
  fi
}

# setting up network
startnetwork() {
  /sbin/getmac
  ifconfig eth0 up
  udhcpc -t 5 -q -s /bin/simple.script -p /run/udhcpc.pid
}

# rescue_shell
rescue_shell() {

  # start ssh
  startnetwork
  dropbear -B -p 2222 -b /etc/dropbear/banner.rescue -P /run/dropbear.pid 2>&1 >/dev/null
  echo -e "\n Something went wrong. Dropping to a shell."

  # Run UART shell
  exec 0</dev/console
  exec 1>/dev/console
  exec 2>/dev/console
  exec setsid cttyhack /bin/ash
}

ask_for_stop() {
  key='boot'
  read -r -p "### Press any key to stop and run shell... (2)" -n1 -t2 key
  if [ "$key" != 'boot' ] || [ $BUTTON_STATUS == 1 ]; then
    rescue_shell
  fi
}

#LVM init sequence
initlvm() {
  lvm vgscan --mknodes # creates /dev/mapper/control
  lvm vgchange -a ly
  lvm vgscan --mknodes # creates /dev/mapper/VG-root and /dev/VG/root
  wait
}

#Switchroot seqence
boot() {
  echo -e "\n Unmounting and Switch to OS"
  # Copy MAC
  wait
  cp /mnt/config/mac_addr /mnt/root/etc
  # kill running daemons
  kill -9 $(cat /run/dropbear.pid)
  kill -9 $(cat /run/udhcpc.pid)
  umount /mnt/config
  umount /proc
  umount /sys
  umount /dev
  exec switch_root /mnt/root /sbin/init
}

# Initial Raid
echo 'DEVICE /dev/sd??*' >/etc/mdadm.conf
mdadm -Eb /dev/sd??* >>/etc/mdadm.conf
mdadm -As --force
wait # disk not ready?
mdadm --assemble --scan

# Mount the config files
ubiattach /dev/ubi_ctrl -m 5
wait
mount -t ubifs ubi0:config /mnt/config

# Init LVM
initlvm

# Mount the root filesystem.
ask_for_stop
mount -o rw $(findfs LABEL=rootfs) /mnt/root

# Clean up and boot
if [ -h /mnt/root/sbin/init ]; then
  boot
fi
#check for LUKS-devices
if
  blkid | grep -q crypto
then
  decrypt_shell
  echo -e "\n Waiting for device decryption"
  # wait until the device exists and is decrypted
  while ! [ -e /dev/mapper/cryptroot ]; do
    sleep 2
  done
fi

initlvm
mount -o rw $(findfs LABEL=rootfs) /mnt/root
if [ -h /mnt/root/sbin/init ]; then
  boot
else
  rescue_shell
fi

if [ -h /mnt/root/sbin/init ]; then
  boot
else
  rescue_shell
fi

